#ifndef HTTP_H
#define HTTP_H

#include <stdlib.h>

enum http_request_verb_e {
    HTTP_REQUEST_CONNECT,
    HTTP_REQUEST_DELETE,
    HTTP_REQUEST_GET,
    HTTP_REQUEST_HEAD,
    HTTP_REQUEST_PATCH,
    HTTP_REQUEST_POST,
    HTTP_REQUEST_PUT,
    HTTP_REQUEST_OPTIONS,
    HTTP_REQUEST_TRACE,
    HTTP_REQUEST_VERB_UNKNOWN
};

extern const char* http_request_verb_strings[HTTP_REQUEST_VERB_UNKNOWN];

enum http_headers_e {
    HEADER_ACCEPT,
    HEADER_ACCEPT_CHARSET,
    HEADER_ACCEPT_ENCODING,
    HEADER_ACCEPT_LANGUAGE,
    HEADER_ACCEPT_RANGES,
    HEADER_AGE,
    HEADER_ALLOW,
    HEADER_AUTHORIZATION,
    HEADER_CACHE_CONTROL,
    HEADER_CONNECTION,
    HEADER_CONTENT_DISPOSITION,
    HEADER_CONTENT_ENCODING,
    HEADER_CONTENT_LANGUAGE,
    HEADER_CONTENT_LENGTH,
    HEADER_CONTENT_LOCATION,
    HEADER_CONTENT_MD5,
    HEADER_CONTENT_RANGE,
    HEADER_CONTENT_TYPE,
    HEADER_COOKIE,
    HEADER_DATE,
    HEADER_ETAG,
    HEADER_EXPECT,
    HEADER_EXPIRES,
    HEADER_FROM,
    HEADER_HOST,
    HEADER_IF_MATCH,
    HEADER_IF_MODIFIED_SINCE,
    HEADER_IF_NONE_MATCH,
    HEADER_IF_RANGE,
    HEADER_IF_UNMODIFIED_SINCE,
    HEADER_KEEP_ALIVE,
    HEADER_LAST_MODIFIED,
    HEADER_LOCATION,
    HEADER_MAX_FORWARDS,
    HEADER_PRAGMA,
    HEADER_PROXY_AUTHENTICATE,
    HEADER_PROXY_AUTHORIZATION,
    HEADER_RANGE,
    HEADER_REFERER,
    HEADER_REFRESH,
    HEADER_RETRY_AFTER,
    HEADER_SERVER,
    HEADER_SET_COOKIE,
    HEADER_TE,
    HEADER_TRAILER,
    HEADER_TRANSFER_ENCODING,
    HEADER_UPGRADE,
    HEADER_USER_AGENT,
    HEADER_VARY,
    HEADER_VIA,
    HEADER_WARN,
    HEADER_WARNING,
    HEADER_WWW_AUTHENTICATE,
    HEADER_UNKNOWN,
    HEADER_END,
};

extern
const char * http_header_strings[HEADER_UNKNOWN];

enum http_request_verb_e atoverb(const char * str);
enum http_headers_e atoheader(const char*);
const char* verbtoa(enum http_request_verb_e key);
const char* headertoa(enum http_headers_e key);

#endif
